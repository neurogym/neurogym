{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to NeuroGym","text":"<p>NeuroGym is a curated collection of neuroscience tasks with a common interface. The goal is to facilitate training of neural network models on neuroscience tasks.</p> <p>NeuroGym inherits from the machine learning toolkit Gymnasium, a maintained fork of OpenAI\u2019s Gym library. It allows a wide range of well established machine learning algorithms to be easily trained on behavioral paradigms relevant for the neuroscience community. NeuroGym also incorporates several properties and functions (e.g. continuous-time and trial-based tasks) that are important for neuroscience applications. The toolkit also includes various modifier functions that allow easy configuration of new tasks.</p> <p></p> <p>\ud83d\udc1b Bugs reports and \u2b50 features requests here</p> <p>\ud83d\udd27 Pull Requests</p> <p>For more details about how to contribute, see the contribution guidelines.</p>"},{"location":"code_of_conduct/","title":"Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at g.crocioni@esciencecenter.nl. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p>"},{"location":"contributing/","title":"Contributing","text":"<p>We welcome any kind of contribution to our software, from simple comment or question to a full fledged pull request. Please read and follow our Code of Conduct.</p> <p>A contribution can be one of the following cases:</p> <ol> <li>you have a question;</li> <li>you think you may have found a bug (including unexpected behavior);</li> <li>you want to make some kind of change to the code base (e.g. to fix a bug, to add a new feature, to update documentation);</li> <li>you want to make a new release of the code base.</li> </ol> <p>The sections below outline the steps in each case.</p>"},{"location":"contributing/#you-have-a-question","title":"You have a question","text":"<ol> <li>use the search functionality here to see if someone already filed the same issue;</li> <li>if your issue search did not yield any relevant results, make a new issue;</li> <li>apply the \"Question\" label; apply other labels when relevant.</li> </ol>"},{"location":"contributing/#you-think-you-may-have-found-a-bug","title":"You think you may have found a bug","text":"<ol> <li>use the search functionality here to see if someone already filed the same issue;</li> <li>if your issue search did not yield any relevant results, make a new issue, making sure to provide enough information to the rest of the community to understand the cause and context of the problem. Depending on the issue, you may want to include:</li> <li>the SHA hashcode of the commit that is causing your problem;</li> <li>some identifying information (name and version number) for dependencies you're using;</li> <li>information about the operating system;</li> <li>apply relevant labels to the newly created issue.</li> </ol>"},{"location":"contributing/#you-want-to-make-some-kind-of-change-to-the-code-base","title":"You want to make some kind of change to the code base","text":"<ol> <li>(important) announce your plan to the rest of the community before you start working. This announcement should be in the form of a (new) issue;</li> <li>(important) wait until some kind of consensus is reached about your idea being a good idea;</li> <li>if needed, fork the repository to your own Github profile and create your own feature branch off of the latest master commit. While working on your feature branch, make sure to stay up to date with the master branch by pulling in changes, possibly from the 'upstream' repository (follow the instructions here and here);</li> <li>make sure the existing tests still work by running <code>pytest</code>;</li> <li>add your own tests (if necessary);</li> <li>update or expand the documentation;</li> <li>update the <code>CHANGELOG.md</code> file with change;</li> <li>push your feature branch to (your fork of) the annubes repository on GitHub;</li> <li>create the pull request, e.g. following the instructions here.</li> </ol> <p>In case you feel like you've made a valuable contribution, but you don't know how to write or run tests for it, or how to generate the documentation: don't let this discourage you from making the pull request; we can help you! Just go ahead and submit the pull request, but keep in mind that you might be asked to append additional commits to your pull request.</p>"},{"location":"installation/","title":"Installation","text":"<p>Create and activate a virtual environment to install the current package, e.g. using conda (please refer to their site for questions about creating the environment):</p> <pre><code>conda activate # ensures you are in the base environment\nconda create -n neurogym python=3.11\nconda activate neurogym\n</code></pre> <p>Then install neurogym as follows:</p> <pre><code>git clone https://github.com/neurogym/neurogym.git\ncd neurogym\npip install -e .\n</code></pre>"},{"location":"installation/#psychopy-installation","title":"Psychopy installation","text":"<p>If you need psychopy for your project, additionally run</p> <pre><code>pip install psychopy\"\n</code></pre>"},{"location":"license/","title":"License","text":"<p>Apache License</p> <p>Copyright 2024, Giulia Crocioni, Dani L. Bodor, The Netherlands eScience Center</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <p>http://www.apache.org/licenses/LICENSE-2.0</p> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"neurogym/","title":"NeuroGym","text":""},{"location":"neurogym/#tasks","title":"Tasks","text":"<p>Currently implemented tasks can be found here.</p>"},{"location":"neurogym/#wrappers","title":"Wrappers","text":"<p>Wrappers (see list) are short scripts that allow introducing modifications the original tasks. For instance, the Random Dots Motion task can be transformed into a reaction time task by passing it through the reaction_time wrapper. Alternatively, the combine wrapper allows training an agent in two different tasks simultaneously.</p>"},{"location":"neurogym/#examples","title":"Examples","text":"<p>NeuroGym is compatible with most packages that use gymnasium. In this example jupyter notebook we show how to train a neural network with reinforcement learning algorithms using the Stable-Baselines3 toolbox.</p>"},{"location":"neurogym/#custom-tasks","title":"Custom tasks","text":"<p>Creating custom new tasks should be easy. You can contribute tasks using the regular gymnasium format. If your task has a trial/period structure, this template provides the basic structure that we recommend a task to have:</p> <pre><code>from gymnasium import spaces\nimport neurogym as ngym\n\nclass YourTask(ngym.PeriodEnv):\n    metadata = {}\n\n    def __init__(self, dt=100, timing=None, extra_input_param=None):\n        super().__init__(dt=dt)\n\n\n    def new_trial(self, **kwargs):\n        \"\"\"\n        new_trial() is called when a trial ends to generate the next trial.\n        Here you have to set:\n        The trial periods: fixation, stimulus...\n        Optionally, you can set:\n        The ground truth: the correct answer for the created trial.\n        \"\"\"\n\n    def _step(self, action):\n        \"\"\"\n        _step receives an action and returns:\n            a new observation, obs\n            reward associated with the action, reward\n            a boolean variable indicating whether the experiment has terminated, terminated\n                See more at https://gymnasium.farama.org/tutorials/gymnasium_basics/handling_time_limits/#termination\n            a boolean variable indicating whether the experiment has been truncated, truncated\n                See more at https://gymnasium.farama.org/tutorials/gymnasium_basics/handling_time_limits/#truncation\n            a dictionary with extra information:\n                ground truth correct response, info['gt']\n                boolean indicating the end of the trial, info['new_trial']\n        \"\"\"\n\n        return obs, reward, terminated, truncated, {'new_trial': new_trial, 'gt': gt}\n</code></pre>"},{"location":"api/core/","title":"Core","text":""},{"location":"api/core/#neurogym.core.TrialEnv","title":"TrialEnv","text":"<pre><code>TrialEnv(dt=100, num_trials_before_reset=10000000, r_tmax=0)\n</code></pre> <p>               Bases: <code>BaseEnv</code></p> <p>The main Neurogym class for trial-based envs.</p> Source code in <code>neurogym/core.py</code> <pre><code>def __init__(self, dt=100, num_trials_before_reset=10000000, r_tmax=0) -&gt; None:\n    super().__init__(dt=dt)\n    self.r_tmax = r_tmax\n    self.num_tr = 0\n    self.num_tr_exp = num_trials_before_reset\n    self.trial: dict | None = None\n    self._ob_built = False\n    self._gt_built = False\n    self._has_gt = False  # check if the task ever defined gt\n\n    self._default_ob_value = None  # default to 0\n\n    # For optional periods\n    self.timing: dict = {}\n    self.start_t: dict = {}\n    self.end_t: dict = {}\n    self.start_ind: dict = {}\n    self.end_ind: dict = {}\n    self._tmax = 0  # Length of each trial\n\n    self._top = self\n    self._duration: dict = {}\n</code></pre>"},{"location":"api/core/#neurogym.core.TrialEnv.seed","title":"seed","text":"<pre><code>seed(seed=None)\n</code></pre> <p>Set random seed.</p> Source code in <code>neurogym/core.py</code> <pre><code>def seed(self, seed=None):\n    \"\"\"Set random seed.\"\"\"\n    self.rng = np.random.RandomState(seed)\n    if hasattr(self, \"action_space\") and self.action_space is not None:\n        self.action_space.seed(seed)\n    for val in self.timing.values():\n        with contextlib.suppress(AttributeError):\n            val.seed(seed)\n    return [seed]\n</code></pre>"},{"location":"api/core/#neurogym.core.TrialEnv.post_step","title":"post_step","text":"<pre><code>post_step(ob, reward, terminated, truncated, info)\n</code></pre> <p>Optional task-specific wrapper applied at the end of step.</p> <p>It allows to modify ob online (e.g. provide a specific observation for different actions made by the agent)</p> Source code in <code>neurogym/core.py</code> <pre><code>def post_step(self, ob, reward, terminated, truncated, info):\n    \"\"\"Optional task-specific wrapper applied at the end of step.\n\n    It allows to modify ob online (e.g. provide a specific observation for different actions made by the agent)\n    \"\"\"\n    return ob, reward, terminated, truncated, info\n</code></pre>"},{"location":"api/core/#neurogym.core.TrialEnv.new_trial","title":"new_trial","text":"<pre><code>new_trial(**kwargs)\n</code></pre> <p>Public interface for starting a new trial.</p> <p>Returns:</p> Name Type Description <code>trial</code> <p>dict of trial information. Available to step function as self.trial</p> Source code in <code>neurogym/core.py</code> <pre><code>def new_trial(self, **kwargs):\n    \"\"\"Public interface for starting a new trial.\n\n    Returns:\n        trial: dict of trial information. Available to step function as\n            self.trial\n    \"\"\"\n    # Reset for next trial\n    self._tmax = 0  # reset, self.tmax not reset so it can be used in step\n    self._ob_built = False\n    self._gt_built = False\n    trial = self._new_trial(**kwargs)\n    self.trial = trial\n    self.num_tr += 1  # Increment trial count\n    self._has_gt = self._gt_built\n    return trial\n</code></pre>"},{"location":"api/core/#neurogym.core.TrialEnv.step","title":"step","text":"<pre><code>step(action)\n</code></pre> <p>Public interface for the environment.</p> Source code in <code>neurogym/core.py</code> <pre><code>def step(self, action):\n    \"\"\"Public interface for the environment.\"\"\"\n    ob, reward, terminated, truncated, info = self._step(action)\n\n    if \"new_trial\" not in info:\n        info[\"new_trial\"] = False\n\n    if self._has_gt and \"gt\" not in info:\n        # If gt is built, default gt to gt_now\n        # must run before incrementing t\n        info[\"gt\"] = self.gt_now\n\n    self.t += self.dt  # increment within trial time count\n    self.t_ind += 1\n\n    if self.t + self.dt &gt; self.tmax and not info[\"new_trial\"]:\n        info[\"new_trial\"] = True\n        reward += self.r_tmax\n\n    # TODO: new_trial happens after step, so trial indx precedes obs change\n    if info[\"new_trial\"]:\n        info[\"performance\"] = self.performance\n        self.t = self.t_ind = 0  # Reset within trial time count\n        trial = self._top.new_trial()\n        self.performance = 0\n        info[\"trial\"] = trial\n    if ob is OBNOW:\n        ob = self.ob[self.t_ind]\n    return self.post_step(ob, reward, terminated, truncated, info)\n</code></pre>"},{"location":"api/core/#neurogym.core.TrialEnv.reset","title":"reset","text":"<pre><code>reset(seed=None, options=None)\n</code></pre> <p>Reset the environment.</p> <p>Parameters:</p> Name Type Description Default <code>seed</code> <p>random seed, overwrites self.seed if not None</p> <code>None</code> <code>options</code> <p>additional options used to reset the env. Can include 'step_fn' and 'no_step'. <code>step_fn</code> can be a function or None. If function, overwrite original <code>self.step</code> method. <code>no_step</code> is a bool. If True, no step is taken and observation randomly sampled. It defaults to False.</p> <code>None</code> Source code in <code>neurogym/core.py</code> <pre><code>def reset(self, seed=None, options=None):\n    \"\"\"Reset the environment.\n\n    Args:\n        seed: random seed, overwrites self.seed if not None\n        options: additional options used to reset the env.\n            Can include 'step_fn' and 'no_step'.\n            `step_fn` can be a function or None. If function, overwrite original\n            `self.step` method.\n            `no_step` is a bool. If True, no step is taken and observation randomly\n            sampled. It defaults to False.\n    \"\"\"\n    super().reset(seed=seed)\n\n    self.num_tr = 0\n    self.t = self.t_ind = 0\n\n    step_fn = options.get(\"step_fn\") if options else None\n    no_step = options.get(\"no_step\", False) if options else False\n\n    self._top.new_trial()\n\n    # have to also call step() to get the initial ob since some wrappers modify step() but not new_trial()\n    self.action_space.seed(0)\n    if no_step:\n        return self.observation_space.sample(), {}\n    if step_fn is None:\n        ob, _, _, _, _ = self._top.step(self.action_space.sample())\n    else:\n        ob, _, _, _, _ = step_fn(self.action_space.sample())\n    return ob, {}\n</code></pre>"},{"location":"api/core/#neurogym.core.TrialEnv.render","title":"render","text":"<pre><code>render(mode='human') -&gt; None\n</code></pre> <p>Plots relevant variables/parameters.</p> Source code in <code>neurogym/core.py</code> <pre><code>def render(self, mode=\"human\") -&gt; None:\n    \"\"\"Plots relevant variables/parameters.\"\"\"\n</code></pre>"},{"location":"api/core/#neurogym.core.TrialEnv.set_top","title":"set_top","text":"<pre><code>set_top(wrapper) -&gt; None\n</code></pre> <p>Set top to be wrapper.</p> Source code in <code>neurogym/core.py</code> <pre><code>def set_top(self, wrapper) -&gt; None:\n    \"\"\"Set top to be wrapper.\"\"\"\n    self._top = wrapper\n</code></pre>"},{"location":"api/core/#neurogym.core.TrialEnv.add_period","title":"add_period","text":"<pre><code>add_period(period, duration=None, before=None, after=None, last_period=False) -&gt; None\n</code></pre> <p>Add an period.</p> <p>Parameters:</p> Name Type Description Default <code>period</code> <p>string or list of strings, name of the period</p> required <code>duration</code> <p>float or None, duration of the period if None, inferred from timing_fn</p> <code>None</code> <code>before</code> <p>(optional) str, name of period that this period is before</p> <code>None</code> <code>after</code> <p>(optional) str, name of period that this period is after or float, time of period start</p> <code>None</code> <code>last_period</code> <p>bool, default False. If True, then this is last period will generate self.tmax, self.tind, and self.ob</p> <code>False</code> Source code in <code>neurogym/core.py</code> <pre><code>def add_period(\n    self,\n    period,\n    duration=None,\n    before=None,\n    after=None,\n    last_period=False,\n) -&gt; None:\n    \"\"\"Add an period.\n\n    Args:\n        period: string or list of strings, name of the period\n        duration: float or None, duration of the period\n            if None, inferred from timing_fn\n        before: (optional) str, name of period that this period is before\n        after: (optional) str, name of period that this period is after\n            or float, time of period start\n        last_period: bool, default False. If True, then this is last period\n            will generate self.tmax, self.tind, and self.ob\n    \"\"\"\n    if self._ob_built:\n        msg = \"Cannot add period after ob is built, i.e. after running add_ob.\"\n        raise InvalidOperationError(msg)\n    if isinstance(period, str):\n        pass\n    else:\n        if duration is None:\n            duration = [None] * len(period)\n        elif len(duration) != len(period):\n            msg = f\"{len(duration)=} and {len(period)=} must be the same.\"\n            raise ValueError(msg)\n\n        # Recursively calling itself\n        self.add_period(period[0], duration=duration[0], after=after)\n        for i in range(1, len(period)):\n            is_last = (i == len(period) - 1) and last_period\n            self.add_period(\n                period[i],\n                duration=duration[i],\n                after=period[i - 1],\n                last_period=is_last,\n            )\n        return\n\n    if duration is None:\n        duration = self.sample_time(period)\n    self._duration[period] = duration\n\n    if after is not None:\n        start = self.end_t[after] if isinstance(after, str) else after\n    elif before is not None:\n        start = self.start_t[before] - duration\n    else:\n        start = 0  # default start with 0\n\n    self.start_t[period] = start\n    self.end_t[period] = start + duration\n    self.start_ind[period] = int(start / self.dt)\n    self.end_ind[period] = int((start + duration) / self.dt)\n\n    self._tmax = max(self._tmax, start + duration)\n    self.tmax = int(self._tmax / self.dt) * self.dt\n</code></pre>"},{"location":"api/core/#neurogym.core.TrialEnv.view_ob","title":"view_ob","text":"<pre><code>view_ob(period=None)\n</code></pre> <p>View observation of an period.</p> Source code in <code>neurogym/core.py</code> <pre><code>def view_ob(self, period=None):\n    \"\"\"View observation of an period.\"\"\"\n    if not self._ob_built:\n        self._init_ob()\n\n    if period is None:\n        return self.ob\n    return self.ob[self.start_ind[period] : self.end_ind[period]]\n</code></pre>"},{"location":"api/core/#neurogym.core.TrialEnv.add_ob","title":"add_ob","text":"<pre><code>add_ob(value, period=None, where=None) -&gt; None\n</code></pre> <p>Add value to observation.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <p>array-like (ob_space.shape, ...)</p> required <code>period</code> <p>string, must be name of an added period</p> <code>None</code> <code>where</code> <p>string or np array, location of stimulus to be added</p> <code>None</code> Source code in <code>neurogym/core.py</code> <pre><code>def add_ob(self, value, period=None, where=None) -&gt; None:\n    \"\"\"Add value to observation.\n\n    Args:\n        value: array-like (ob_space.shape, ...)\n        period: string, must be name of an added period\n        where: string or np array, location of stimulus to be added\n    \"\"\"\n    self._add_ob(value, period, where, reset=False)\n</code></pre>"},{"location":"api/core/#neurogym.core.TrialEnv.set_groundtruth","title":"set_groundtruth","text":"<pre><code>set_groundtruth(value, period=None, where=None) -&gt; None\n</code></pre> <p>Set groundtruth value.</p> Source code in <code>neurogym/core.py</code> <pre><code>def set_groundtruth(self, value, period=None, where=None) -&gt; None:\n    \"\"\"Set groundtruth value.\"\"\"\n    if not self._gt_built:\n        self._init_gt()\n\n    if where is not None:\n        # TODO: Only works for Discrete action_space, make it work for Box\n        value = self.action_space.name[where][value]  # type: ignore[attr-defined]\n    if isinstance(period, str):\n        self.gt[self.start_ind[period] : self.end_ind[period]] = value\n    elif period is None:\n        self.gt[:] = value\n    else:\n        for p in period:\n            self.set_groundtruth(value, p)\n</code></pre>"},{"location":"api/core/#neurogym.core.TrialEnv.view_groundtruth","title":"view_groundtruth","text":"<pre><code>view_groundtruth(period)\n</code></pre> <p>View observation of an period.</p> Source code in <code>neurogym/core.py</code> <pre><code>def view_groundtruth(self, period):\n    \"\"\"View observation of an period.\"\"\"\n    if not self._gt_built:\n        self._init_gt()\n    return self.gt[self.start_ind[period] : self.end_ind[period]]\n</code></pre>"},{"location":"api/core/#neurogym.core.TrialEnv.in_period","title":"in_period","text":"<pre><code>in_period(period, t=None)\n</code></pre> <p>Check if current time or time t is in period.</p> Source code in <code>neurogym/core.py</code> <pre><code>def in_period(self, period, t=None):\n    \"\"\"Check if current time or time t is in period.\"\"\"\n    if t is None:\n        t = self.t  # Default\n    return self.start_t[period] &lt;= t &lt; self.end_t[period]\n</code></pre>"},{"location":"api/core/#neurogym.core.BaseEnv","title":"BaseEnv","text":"<pre><code>BaseEnv(dt=100)\n</code></pre> <p>               Bases: <code>Env</code></p> <p>The base Neurogym class to include dt.</p> Source code in <code>neurogym/core.py</code> <pre><code>def __init__(self, dt=100) -&gt; None:\n    super().__init__()\n    self.dt = dt\n    self.t = self.t_ind = 0\n    self.tmax = 10000  # maximum time steps\n    self.performance = 0\n    self.rewards: dict = {}\n    self.rng = np.random.RandomState()\n</code></pre>"},{"location":"api/core/#neurogym.core.BaseEnv.seed","title":"seed","text":"<pre><code>seed(seed=None)\n</code></pre> <p>Set random seed.</p> Source code in <code>neurogym/core.py</code> <pre><code>def seed(self, seed=None):\n    \"\"\"Set random seed.\"\"\"\n    self.rng = np.random.RandomState(seed)\n    if self.action_space is not None:\n        self.action_space.seed(seed)\n    return [seed]\n</code></pre>"},{"location":"api/envs/annubesenv/","title":"AnnubesEnv","text":""},{"location":"api/envs/annubesenv/#neurogym.envs.annubes.AnnubesEnv","title":"AnnubesEnv","text":"<pre><code>AnnubesEnv(session: dict[str, float] | None = None, stim_intensities: list[float] | None = None, stim_time: int = 1000, catch_prob: float = 0.5, max_sequential: int | None = None, fix_intensity: float = 0, fix_time: Any = 500, iti: Any = 0, dt: int = 100, tau: int = 100, output_behavior: list[float] | None = None, noise_std: float = 0.01, rewards: dict[str, float] | None = None, random_seed: int | None = None)\n</code></pre> <p>               Bases: <code>TrialEnv</code></p> <p>General class for the Annubes type of tasks.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>dict[str, float] | None</code> <p>Configuration of the trials that can appear during a session. It is given by a dictionary representing the ratio (values) of the different trials (keys) within the task. Trials with a single modality (e.g., a visual trial) must be represented by single characters, while trials with multiple modalities (e.g., an audiovisual trial) are represented by the character combination of those trials. Note that values are read relative to each other, such that e.g. <code>{\"v\": 0.25, \"a\": 0.75}</code> is equivalent to <code>{\"v\": 1, \"a\": 3}</code>. Defaults to {\"v\": 0.5, \"a\": 0.5}.</p> <code>None</code> <code>stim_intensities</code> <code>list[float] | None</code> <p>List of possible intensity values of each stimulus, when the stimulus is present. Note that when the stimulus is not present, the intensity is set to 0. Defaults to [0.8, 0.9, 1].</p> <code>None</code> <code>stim_time</code> <code>int</code> <p>Duration of each stimulus in ms. Defaults to 1000.</p> <code>1000</code> <code>catch_prob</code> <code>float</code> <p>Probability of catch trials in the session. Must be between 0 and 1 (inclusive). Defaults to 0.5.</p> <code>0.5</code> <code>max_sequential</code> <code>int | None</code> <p>Maximum number of sequential trials of the same modality. It applies only to the modalities defined in <code>session</code>, i.e., it does not apply to catch trials.  Defaults to None (no maximum).</p> <code>None</code> <code>fix_intensity</code> <code>float</code> <p>Intensity of input signal during fixation. Defaults to 0.</p> <code>0</code> <code>fix_time</code> <code>Any</code> <p>Fixation time specification. Can be one of the following: - A number (int or float): Fixed duration in milliseconds. - A callable: Function that returns the duration when called. - A list of numbers: Random choice from the list. - A tuple specifying a distribution:     - (\"uniform\", (min, max)): Uniform distribution between min and max.     - (\"choice\", [options]): Random choice from the given options.     - (\"truncated_exponential\", [parameters]): Truncated exponential distribution.     - (\"constant\", value): Always returns the given value.     - (\"until\", end_time): Sets duration to reach the specified end time. The final duration is rounded down to the nearest multiple of the simulation timestep (dt). Note that the duration of each input and output signal is increased by this time. Defaults to 500.</p> <code>500</code> <code>iti</code> <code>Any</code> <p>Inter-trial interval, or time window between sequential trials, in ms. Same format as <code>fix_time</code>. Defaults to 0.</p> <code>0</code> <code>dt</code> <code>int</code> <p>Time step in ms. Defaults to 100.</p> <code>100</code> <code>tau</code> <code>int</code> <p>Time constant in ms. Defaults to 100.</p> <code>100</code> <code>output_behavior</code> <code>list[float] | None</code> <p>List of possible intensity values of the behavioral output. Currently only the smallest and largest value of this list are used. Defaults to [0, 1].</p> <code>None</code> <code>noise_std</code> <code>float</code> <p>Standard deviation of the input noise. Defaults to 0.01.</p> <code>0.01</code> <code>rewards</code> <code>dict[str, float] | None</code> <p>Dictionary of rewards for different outcomes. The keys are \"abort\", \"correct\", and \"fail\". Defaults to {\"abort\": -0.1, \"correct\": +1.0, \"fail\": 0.0}.</p> <code>None</code> <code>random_seed</code> <code>int | None</code> <p>Seed for numpy's random number generator (rng). If an int is given, it will be used as the seed for <code>np.random.default_rng()</code>. Defaults to None (i.e. the initial state itself is random).</p> <code>None</code> Source code in <code>neurogym/envs/annubes.py</code> <pre><code>def __init__(\n    self,\n    session: dict[str, float] | None = None,\n    stim_intensities: list[float] | None = None,\n    stim_time: int = 1000,\n    catch_prob: float = 0.5,\n    max_sequential: int | None = None,\n    fix_intensity: float = 0,\n    fix_time: Any = 500,\n    iti: Any = 0,\n    dt: int = 100,\n    tau: int = 100,\n    output_behavior: list[float] | None = None,\n    noise_std: float = 0.01,\n    rewards: dict[str, float] | None = None,\n    random_seed: int | None = None,\n):\n    if session is None:\n        session = {\"v\": 0.5, \"a\": 0.5}\n    if output_behavior is None:\n        output_behavior = [0, 1]\n    if stim_intensities is None:\n        stim_intensities = [0.8, 0.9, 1.0]\n    if session is None:\n        session = {\"v\": 0.5, \"a\": 0.5}\n    super().__init__(dt=dt)\n    self.session = {i: session[i] / sum(session.values()) for i in session}\n    self.stim_intensities = stim_intensities\n    self.stim_time = stim_time\n    self.catch_prob = catch_prob\n    self.max_sequential = max_sequential\n    self.sequential_count = 1\n    self.last_modality: str | None = None\n    self.fix_intensity = fix_intensity\n    self.fix_time = fix_time\n    self.iti = iti\n    self.dt = dt\n    self.tau = tau\n    self.output_behavior = output_behavior\n    self.noise_std = noise_std\n    self.random_seed = random_seed\n    alpha = dt / self.tau\n    self.noise_factor = self.noise_std * np.sqrt(2 * alpha) / alpha\n    # Set random state\n    if random_seed is None:\n        rng = np.random.default_rng(random_seed)\n        self._random_seed = rng.integers(2**32)\n    else:\n        self._random_seed = random_seed\n    self._rng = np.random.default_rng(self._random_seed)\n    # Rewards\n    if rewards is None:\n        self.rewards = {\"abort\": -0.1, \"correct\": +1.0, \"fail\": 0.0}\n    else:\n        self.rewards = rewards\n    self.timing = {\"fixation\": self.fix_time, \"stimulus\": self.stim_time, \"iti\": self.iti}\n    # Set the name of each input dimension\n    obs_space_name = {\"fixation\": 0, \"start\": 1, **{trial: i for i, trial in enumerate(session, 2)}}\n    self.observation_space = ngym.spaces.Box(low=0.0, high=1.0, shape=(len(obs_space_name),), name=obs_space_name)\n    # Set the name of each action value\n    self.action_space = ngym.spaces.Discrete(\n        n=len(self.output_behavior),\n        name={\"fixation\": self.fix_intensity, \"choice\": self.output_behavior[1:]},\n    )\n</code></pre>"}]}